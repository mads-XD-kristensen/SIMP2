package com.si;

import jakarta.mail.*;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;
import org.camunda.bpm.engine.delegate.DelegateExecution;
import org.camunda.bpm.engine.delegate.JavaDelegate;
import org.springframework.stereotype.Component;

import java.util.Date;
import java.util.Properties;

@Component
public class complaintMail implements JavaDelegate {

    public static void sendEmail(Session session, String toEmail, String subject, String body) {
        try {
            MimeMessage msg = new MimeMessage(session);

            msg.addHeader("Content-type", "text/HTML; charset=UTF-8");
            msg.addHeader("format", "flowed");
            msg.addHeader("Content-Transfer-Encoding", "8bit");

            msg.setFrom(new InternetAddress("enteremail@gmail.com", "complaint-handler"));

            msg.setReplyTo(InternetAddress.parse("enteremail@gmail.com", false));

            msg.setSubject(subject, "UTF-8");

            msg.setText(body, "UTF-8");

            msg.setSentDate(new Date());

            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail, false));
            System.out.println("Message is ready");
            Transport.send(msg);

            System.out.println("EMail Sent Successfully!!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void execute(DelegateExecution delegateExecution) throws Exception {
        final String fromEmail = "enteremail@gmail.com"; //requires valid gmail id
        final String password = "password"; // app password generated by google
        final String kundeEmail = (String) delegateExecution.getVariable("email"); // can be any email id
        boolean solution = true;

        System.out.println("TLSEmail Start");
        Properties props = new Properties();
        props.put("mail.smtp.host", "smtp.gmail.com"); //SMTP Host
        props.put("mail.smtp.port", "587"); //TLS Port
        props.put("mail.smtp.auth", "true"); //enable authentication
        props.put("mail.smtp.starttls.enable", "true"); //enable STARTTLS

        Authenticator auth = new Authenticator() {

            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(fromEmail, password);
            }
        };

        Session session = Session.getInstance(props, auth);

        try { // måden vi håndtere om en klage kan løses er gennem en variabel, som kommer fra camunda, som hedder
            // managerSolution. Den eneste måde at en klage bliver lavet som ikke løselig, er hvis en manager
            // har kigget på klagen, og derved bliver variablen sat til false. Variablen styrer så hvilken slags mail, der skal sendes tilbage
            solution = (boolean) delegateExecution.getVariable("managerSolution");
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

        // Mangler nogle lidt mere specifikke svar, når der sendes email
        if (!solution) {
            sendEmail(session, kundeEmail, "Klage kunne ikke løses", "Din klage kunne desværre ikke løses lige i øjeblikket :)");
        } else {
            sendEmail(session, kundeEmail, "Klage er løst", "Din klage er blevet løst :)");
        }

    }
}